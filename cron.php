<?php
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
/**
 * Runs the cron scripts with minimal overhead.
 * Should be called on regular basis.
 * 
 * @author Hugh Nougher <hughnougher@gmail.com>
 */

// Lets get started!
$GLOBALS['ScriptStartTime'] = microtime(1);
require_once 'config.php';
define('HNWC_CRON', true);
define('CRON_DATA_FILE', CRON_PATH.'/!cron_data.php');
date_default_timezone_set(SERVER_TIMEZONE);

// Default Includes
require_once CLASS_PATH. '/ErrorHandler.class.php';
require_once CLASS_PATH. '/HNMySQL.class.php';
require_once CLASS_PATH. '/FieldList.class.php';
require_once CLASS_PATH. '/HNOBJBasic.obj.class.php';
require_once CLASS_PATH. '/HNMOBBasic.class.php';
require_once CLASS_PATH. '/HNAutoQuery.class.php';
HNMySQL::connect(MYSQL_HOST, MYSQL_USER, MYSQL_PASS, MYSQL_DATABASE);

function out($str) {
	echo $str . "\n";
}

class CRON
{
	public static function initiate() {
		// Prepare $lastRun and $nextRun array
		if (is_file(CRON_DATA_FILE)) {
			include CRON_DATA_FILE;
		} else {
			echo "CRON data file not found\n";
			$lastRun = array();
			$nextRun = array();
		}
		$filesTouched = array();

		if (is_dir(CRON_PATH.'/')) {
			if ($dh = opendir(CRON_PATH.'/')) {
				while (($file = readdir($dh)) !== false) {
					if ($file[0] == '!' || filetype(CRON_PATH.'/'.$file) != 'file')
						continue;
					$filesTouched[] = $file;
					
					// Only run scripts that are in need of running
					if (!empty($nextRun[$file]) && time() < $nextRun[$file])
						continue;
					
					// Make certain that there is a lastRin value
					if (empty($lastRun[$file]))
						$lastRun[$file] = 0;
					
					$scriptStart = microtime(1);
					printf("%'-35s ---------------\n", ' '.$file);
					$nextRun[$file] = self::run_script(CRON_PATH.'/'.$file, array('lastRun' => $lastRun[$file]));
					$lastRun[$file] = time();
					printf("%'-23s %1.2e sec ---------------\n", ' END at', microtime(1) - $scriptStart);
				}
				closedir($dh);
			}
		}

		$fileOut = sprintf("<?php /* AUTO GENERATED BY CRON.PHP ON %s */\n\$lastRun = array(\n", date('r'));
		foreach ($lastRun as $file => $time) {
			if (in_array($file, $filesTouched))
				$fileOut .= sprintf("'%s'=>%u, // %s\n", $file, $time, date('r', $time));
		}
		$fileOut .= ");\n\$nextRun=array(\n";
		foreach ($nextRun as $file => $time) {
			if (in_array($file, $filesTouched))
				$fileOut .= sprintf("'%s'=>%u, // %s\n", $file, $time, date('r', $time));
		}
		$fileOut .= ');';
		file_put_contents(CRON_DATA_FILE, $fileOut, LOCK_EX);
	}

	/**
	 * This function is used to make certain the called page is run
	 * in a different context to everything else here.
	 * All variables defined in this function are available in the script.
	 */
	private static function run_script($path, $lots0param) {
		// Extract variables we wish to pass
		foreach ($lots0param AS $lots0key => $lots0val)
			${$lots0key} = $lots0val;
		unset($lots0param, $lots0key, $lots0val);
		
		return include $path;
	}
}

// Run It and End
CRON::initiate();
printf('Total Script Time: %1.2e sec', microtime(1) - $GLOBALS['ScriptStartTime']);
